akka {
  actor {
    provider = cluster
    serialization-bindings {
      "com.CborSerializable" = jackson-cbor
    }
  }
  remote {
    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }
  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:25251",
#       "akka://ClusterSystem@127.0.0.1:25252"
      ]
    min-nr-of-members = 1
    role {
        shard.min-nr-of-members = 4
    }
    sharding {
      # Number of shards used by the default HashCodeMessageExtractor
      # when no other message extractor is defined. This value must be
      # the same for all nodes in the cluster and that is verified by
      # configuration check when joining. Changing the value requires
      # stopping all nodes in the cluster.
      number-of-shards = 4
      # By default, when a shard is rebalanced to another node, the entities 
      # it stored before migration, are NOT started immediatelly after. 
      # Instead they are recreated ad-hoc, when new messages are incoming.
      # This behavior can be modified by akka.cluster.sharding.remember-entities = true
      # configuration. It will instruct shards to keep their state between rebalances - it 
      # also comes with extra cost due to necessity of persisting information about 
      # started/stopped entities. Additionally a message extractor logic must be aware 
      # of ShardRegion.StartEntity message:
      # https://docs.huihoo.com/akka.net/site/articles/clustering/cluster-sharding.html#remembering-entities
      # remember-entities = true
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
}

ec2 {
      num-partitions = 4
      partitions-paths = [
      ]
}
